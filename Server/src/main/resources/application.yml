spring:
  h2:
    console:
      enabled: true
      path: /h2
  datasource:
    url: jdbc:h2:mem:test
  jpa:
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        show_sql: false
    show-sql: true
  output:
    ansi:
      enabled: ALWAYS
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: secret
            client-secret: secret
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            scope:
              - email
              - profile
          github:
            client-id: secret
            client-secret: secret
            scope:
              - email
              - profile
logging:
  level:
    org:
      springframework:
        orm:
          jpa: warn
    root: info
server:
  servlet:
    encoding:
      force-response: true
mail:
  address:
    admin: admin@gmail.com
jwt:
  secret-key: j3904hj3bni3nb390bj9380q5jg309qjbi3ej4nb9053qjb90j35q0bjq90j           # 민감한 정보는 시스템 환경 변수에서 로드한다.
  access-token-expiration-minutes: 30
  refresh-token-expiration-minutes: 420
cloud:
  aws:
    credentials:
      accessKey: secret
      secretKey: secret
    region.static: ap-northeast-2
    stack.auto: false
    s3.bucketName: my-springboot-build
custom:
  backend.host: localhost
  frontend.host: localhost

---

spring:
  config:
    activate:
      on-profile: dev # dev 환경 전용 설정 (위의 기본 설정을 덮어쓰는 방식)
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${RDS_URL}
    username: ${RDS_USERNAME}
    password: ${RDS_PWD}
  jpa:
    hibernate:
      ddl-auto: update # 운영 서버에서는 create 하면 X
    properties:
      hibernate:
        show_sql: false
  h2:
    console:
      enabled: false
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: ${OAUTH2_GOOGLE_ID}
            clientSecret: ${OAUTH2_GOOGLE_SECRET}
            scope:
              - email
              - profile
          github:
            clientId: ${OAUTH2_GITHUB_ID}
            clientSecret: ${OAUTH2_GITHUB_SECRET}
            scope:
              - email
              - profile
logging:
  level:
    org:
      springframework:
        orm:
          jpa: warn
    root: info
jwt:
  secret-key: ${JWT_SECRET_KEY}
  access-token-expiration-minutes: 1440
  refresh-token-expiration-minutes: 2880
cloud:
  aws:
    credentials:
      accessKey: ${AWS_ACCESS_KEY} # 키 절대 노출 금지
      secretKey: ${AWS_SECRET_KEY} # 키 절대 노출 금지
    region.static: ap-northeast-2
    stack.auto: false
    s3.bucketName: my-springboot-build
custom:
  backend.host: ec2-13-125-30-88.ap-northeast-2.compute.amazonaws.com
  frontend.host: ec2-13-125-30-88.ap-northeast-2.compute.amazonaws.com